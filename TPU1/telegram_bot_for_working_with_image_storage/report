Цель работы 
Закрепить навыки создания телеграм-ботов на языке python. Научиться работать с базами данных sql, используя библиотеку pandas. Разработать телеграм-бота, который позволяет сохранять изображения в файловом хранилище, а также фиксировать действия пользователя с Телеграм-ботом в базе данных.
Задание
•	Создать папку, куда будут сохраняться изображения, загружаемые пользователем, и две базы данных (БД): actions_database.db, images_database.db. (Первая БД actions_database.db используется для фиксации обращений пользователя к телеграм-боту, а вторая БД images_database.db - для сохранения путей, владельца и названия изображений, которые были отправлены в Телеграм-бот)
•	При активации чат-бота (‘/start’, ‘/chika’) вывести информацию, что чат бот служит для сохранения изображений в облаке и получении сохраненных изображений по имени.
•	Вывести меню «Загрузка изображения», «Поиск изображения по названию», «Получение списка своих изображений», «Удаление изображения».
•	При активации каждой из этих кнопок удалить это меню из кнопок.
•	Если выбран пункт «Загрузка изображения»: попросить пользователя загрузить изображение в чат. После того как пользователь положит изображение в чат сохранить эту картинку в облаке. Запросить у пользователя название картинки. Сохранить в БД  actions_database.db  информацию о том, что была добавлена картинка, информация о картинке добавить в БД images_database.db. Сохранить в БД images_database.db информацию о названии картинки, введенной пользователем, владельце изображения, пути к файлу изображения и поставить статус «Активное изображение». Вывести снова пункты главного меню.
•	Если выбран пункт «Поиск изображения по названию»: запросить название картинки пользователя. Если картинка есть с таким названием в базе images_database.db среди изображений владельца, то отобразить её в чате, иначе сообщить что такого изображения нет. Добавить в actions_database.db информацию о том, что пользователь запросил изображение с заданным именем и результатом, было ли это изображение найдено. Вывести снова пункты главного меню.
•	Если выбран пункт «Получение списка своих изображений»: запросить названия первых десяти изображений этого пользователя, у которых статус «Активное изображение» в базе данных images_database.db и вывести их в чат. Вывести снова пункты главного меню.


Ход работы
Для корректной работы телеграм-бота, были написаны и использованы следующие функции, переменные и структуры данных:
1.#Функция получения названия всех изображений пользователя
def get_list_of_images(user_id : str) -> list:

2.#Функция получения имени файла и пути к файлу для нового изображения
def get_path_for_new_image():

3.#Функция для добавления записи в базу изображений
def add_record_to_image_database(image_name : str, file_path : str, user_id : int) -> None:

4.#Функция для добавления записи в базу действий пользователя
def add_record_to_action_database(user_id : int, user_name : str, action : str, timestamp: datetime, description : str) -> None:

5.#Функция для получения информации из базы действий пользователя по его user_id
def get_last_action_from_database(user_id: int) ->list:

6.#Получить путь к заданной картинке из таблицы изображений
def get_image_path_from_database(name, user:int):

7.#Удалить изображение из таблицы изображений, заменив Active на Inactive
def delete_image_from_database(name, user:int):

8.#Функция для получения клавиатуры с кнопками приглашения
def get_start_buttons():

9.#Вывести изображение по запросу пользователя
def output_image(file_name, user:int):

10.#Функция обработки команд
@bot.message_handler(commands=['start', 'chika'])
def start_bot(message):

11.#Функция обработки сообщений
@bot.message_handler(content_types=['text'])
def get_image_name(message):

12.#Функция обработки нажатий кнопок
@bot.callback_query_handler(func = lambda call: True)
def callback_worker(call)

13.#Функция обработки полученных ботом изображений
@bot.message_handler(content_types=['photo'])
def get_image(message):


*query #переменная(string), запрос
*connection #структура(sqlite3 connection), обеспечивающая подключение к таблице
df #структура(DataFrame), хранящая «снимок» таблицы
file_path # переменная(string), путь к файлу
file_name # переменная(string), название файла
last_action # переменная(string), последнее действие пользователя
TELEGRAM_API_TOKEN #токен созданного бота (строка)

bot #бот
image#изображение
markup#клавиатура
button_get_list#кнопки
button_select_from_collection
button_load_image
button_delete_image
button_list_of_titles
button_yes
button_no

Код программы
С кодом программы можно ознакомиться по следующей ссылке, код сопровождён комментариями: 
https://colab.research.google.com/drive/1HjJ3VgwAnDRsWpoSfjnel67I-ONbaIaI?usp=sharing

 
Выводы
В результате выполнения данной лабораторной работы я закрепила навык разработки телеграм-ботов на языке python с помощью библиотеки pytelegrambotapi. Освоила на начальном уровне работу с базами данных и SQL запросами. И что немаловажно узнала, какие данные могут получить боты в следствие работы с ними. Также я освоила онлайн среду разработки google colab. Аватар телеграм-бота создан с помощью нейросети Fusion Brain. 
