Поиск и сортировка

Цель работы 
Ознакомиться с видами и способами сортировок данных, алгоритмами поиска элементов. Написать и отладить программы, в которых будут использованы известные алгоритмы сортировки элементов массива. 
Задание
Вариант №5
Задание 1.
Считать с клавиатуры число N≥3. Сгенерировать N случайных целых чисел от 0 до 20 и сохранить их в массиве Z(N). Вывести массив Z(N). Считать с клавиатуры число x, проверить, существуют ли в неупорядоченном сгенерированном массиве Z(N) элементы, равные x. Вывести их количество и позиции в массиве, либо сообщение о том, что таких элементов нет.
Задание 2.
Для массива Z(N) из пункта 1 реализовать алгоритм «Оптимизированная пузырьковая сортировка по возрастанию». Вывести полученный массив S(N).
Задание 3.
Для массива Z(N) из пункта 1 реализовать алгоритм «Сортировка выбором по возрастанию». Вывести полученный массив S(N).
Задание 4.
Для массива Z(N) из пункта 1 реализовать алгоритм «Сортировка подсчетом по возрастанию». Вывести полученный массив S(N).
Задание 5.
Реализовать алгоритм проверки существования в упорядоченном массиве S(N) элементов, равных x. Вывести их количество и позиции в массиве, либо сообщение о том, что таких элементов нет. 


Текст программы
Задание 1.
#include <iostream>
using namespace std;

void linear_search(int array[], int size, int x) {
    int count = 0; //counter of accordances
    cout << "X indices: ";
    for (int i = 0; i < size; i++) {
        if (x == array[i]) { //seeking accordances
            cout << i << " "; //output indices
            count += 1;
        }
    }
    cout << endl << "Number of accordances: " << count << endl;
    if (count == 0) {
        cout << "There aren't any accordances\n";
    }
}

int main() {
    srand(time(NULL));
    int n; //size of input array
    int x; //number to seek in array Z
    cout << "Enter integer N>=3 - size of array: "; cin >> n;
    int* z = new int[n]; //allocation memory 
    for (int i = 0; i < n; i++) { //filling array
        z[i] = rand() % 21; //RAND_MAX value is at least 32767
    }
    for (int i = 0; i < n; i++) { //output
        cout << z[i] << " ";
    }cout << endl;
    cout << "Enter integer X to seek in generated array: ";  cin >> x;
    linear_search(z, n, x);
    delete[]z;
    return 0;
} 
Задание 2.
#include <iostream>
using namespace std;

int& cocktail_sort(int array[], int size) {
    int left = 0; //set left unsorted border
    int right = size - 1; //set right unsorted border
    while (left <= right) {
        for (int i = left; i < right; i++) { //from left to right swap elements, if "left" > "right"
            if (array[i] > array[i + 1]) {
                swap(array[i], array[i + 1]);
            }
        }
        right--; //decrement right border (max at the end of array)
        for (int i = right; i > left; i--) { //from right to left swap elements, if "left" > "right"
            if (array[i - 1] > array[i]) {
                swap(array[i - 1], array[i]);
            }
        }
        left++; // increment left border(min at the beginning of array)
    }
    return *array;
}

int main() {
    srand(time(NULL));
    int n; //size of input array
    cout << "Enter integer N>=3 - size of array: "; cin >> n;
    int* z = new int[n]; //allocation memory
    int* s = new int[n]; //allocation memory
    for (int i = 0; i < n; i++) { //filling array
        z[i] = rand() % 21; //RAND_MAX value is at least 32767
        s[i] = z[i];
    }
    cout << "Original array: ";
    for (int i = 0; i < n; i++) { //output
        cout << z[i] << " ";
    }cout << endl;
    s = &cocktail_sort(s, n);
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) { //output
        cout << s[i] << " ";
    }cout << endl;
	delete[]z;
	delete[]s;
    return 0;
} 

 Задание 3.
#include <iostream>
using namespace std;

int& selection_sort(int array[], int size) {
    for (int i = 0; i < size - 1; i++) { //go through array n-1 times
        int min = i; //set left border
        for (int j = i + 1; j < size; j++) {
            if (array[j] < array[min]) { //seeking minimum in rest part of array
                min = j;
            }
        }
        if (min != i) { //moving minimum to the left border
            swap(array[i], array[min]);
        }
    }
    return *array;
}

int main() {
    srand(time(NULL));
    int n; //size of input array
    cout << "Enter integer N>=3 - size of array: "; cin >> n;
    int* z = new int[n]; //allocation memory
    int* s = new int[n]; //allocation memory
    for (int i = 0; i < n; i++) { //filling array
        z[i] = rand() % 21; //RAND_MAX value is at least 32767
        s[i] = z[i];
    }
    cout << "Original array: ";
    for (int i = 0; i < n; i++) { //output
        cout << z[i] << " ";
    }cout << endl;
    s = &selection_sort(s, n);
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) { //output
        cout << s[i] << " ";
    }cout << endl;
	delete[]z;
	delete[]s;
    return 0;
} 
Задание 4.
#include <iostream>
using namespace std;

int& counting_sort(int array[], int size) {
    int min = INT_MAX; int max = INT_MIN; //minimum and maximum elements in array
    for (int i = 0; i < size; i++) { //searching minimum and maximum elements in array
        if (array[i] > max) {
            max = array[i];
        }
        if (array[i] < min) {
            min = array[i];
        }
    }
    int* c = new int[max - min + 1]; //additional array to count each element in generated array 
    fill(c, c+max-min+1, 0); //filling array C with zeroes
    for (int i = 0; i < size; i++) { //filling additional array with counted elements with shift to left by minimum 
        c[array[i] - min] += 1;
    }
    for (int i = 0, j = 0; i < max-min+1; i++) { //filling generated array with sorted elements
        while (c[i]) {
            array[j] = i+min;
            c[i] -= 1;
            j++;
        }
    }
    return *array;
}

int main() {
    srand(time(NULL));
    int n; //size of input array
    cout << "Enter integer N>=3 - size of array: "; cin >> n;
    int* z = new int[n]; //allocation memory
    int* s = new int[n]; //allocation memory
    for (int i = 0; i < n; i++) { //filling array
        z[i] = rand() % 21; //RAND_MAX value is at least 32767
        s[i] = z[i];
    }
    cout << "Original array: ";
    for (int i = 0; i < n; i++) { //output
        cout << z[i] << " ";
    }cout << endl;
    s = &counting_sort(s, n);
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) { //output
        cout << s[i] << " ";
    }cout << endl;
	delete[]z;
	delete[]s;

    return 0;
} 

Задание 5. 
#include <iostream>
using namespace std;

int& selection_sort(int array[], int size) {
    for (int i = 0; i < size - 1; i++) { //go through array n-1 times
        int min = i; //set left border
        for (int j = i + 1; j < size; j++) {
            if (array[j] < array[min]) { //seeking minimum in rest part of array
                min = j;
            }
        }
        if (min != i) { //moving minimum to the left border
            swap(array[i], array[min]);
        }
    }
    return *array;
}


void linear_search(int array[], int size, int x) {
    int count = 0; //counter of accordances
    cout << "X indices: ";
    for (int i = 0; i < size; i++) {
        if (x == array[i]) { //seeking accordances
            cout << i << " "; //output indices
            count += 1;
        }
    }
    cout << endl << "Number of accordances: " << count << endl;
    if (count == 0) {
        cout << "There aren't any accordances\n";
    }
}

int main() {
    srand(time(NULL));
    int n; //size of input array
    int x; //number to seek in array S
    cout << "Enter integer N>=3 - size of array: "; cin >> n;
    int* s = new int[n]; //allocation memory 
    for (int i = 0; i < n; i++) { //filling array
        s[i] = rand() % 21; //RAND_MAX value is at least 32767
    }
    cout << "Original array: ";
    for (int i = 0; i < n; i++) { //output
        cout << s[i] << " ";
    }cout << endl;

    selection_sort(s, n);
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) { //output
        cout << s[i] << " ";
    }cout << endl;

    cout << "Enter integer X to seek in sorted array: ";  cin >> x;
    linear_search(s, n, x);
	delete[]s;

    return 0;
}
 
// more faster binary_search instead linear_search
#include <iostream>
using namespace std;

int& selection_sort(int array[], int size) {
    for (int i = 0; i < size - 1; i++) { //go through array n-1 times
        int min = i; //set left border
        for (int j = i + 1; j < size; j++) {
            if (array[j] < array[min]) { //seeking minimum in rest part of array
                min = j;
            }
        }
        if (min != i) { //moving minimum to the left border
            swap(array[i], array[min]);
        }
    }
    return *array;
}


void binary_search(int array[], int size, int x) {
    int count = 0; //counter of accordances
    int m = size/ 2; //current middle element index
    int l = 0; int r = size;
    cout << "X indices: ";
    int i;
    while(l <= r) {
        if (x == array[m]) {
            int tmp_m = m - 1;
            while ((x == array[m]) && (m < size)) { //searching accordances in the right part
                cout << m << " "; //output indices
                m++;
                count += 1;
            }
            while ((x == array[tmp_m]) && (tmp_m > 0)) { // searching accordances in the left part
                cout << tmp_m << " "; // output indices
                tmp_m--;
                count += 1;
            }
            break;
        }
        if (x < array[m]) { //shift right border and change middle
            r = m - 1;
            m = (r - l) / 2 + l;
        }
        else {
            if (x > array[m]) { //shift left border and change middle
                l = m + 1;
                m = (r - l) / 2 + l;
            }
        }
    }
    cout << endl << "Number of accordances: " << count << endl;
    if (count == 0) {
        cout << "There aren't any accordances\n";
    }
}

int main() {
    srand(time(NULL));
    int n; //size of input array
    int x; //number to seek in array S
    cout << "Enter integer N>=3 - size of array: "; cin >> n;
    int* s = new int[n]; //allocation memory 
    for (int i = 0; i < n; i++) { //filling array
        s[i] = rand() % 21; //RAND_MAX value is at least 32767
    }
    cout << "Original array: ";
    for (int i = 0; i < n; i++) { //output
        cout << s[i] << " ";
    }cout << endl;

    selection_sort(s, n);
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) { //output
        cout << s[i] << " ";
    }cout << endl;

    cout << "Enter integer X to seek in sorted array: ";  cin >> x;
    binary_search(s, n, x);

    delete[]s;
    return 0;
}

 
Выводы
В результате выполнения лабораторной работы были изучены одни из основных алгоритмов сортировки массива: сортировка перемешиванием (устойчивый алгоритм сортировки), сортировка выбором (неустойчивый алгоритм сортировки), сортировка подсчётом (алгоритм, не основывающийся на сравнениях). Также были изучены и реализованы алгоритмы поиска: линейный и бинарный, где бинарный работает быстрее линейного на упорядоченных данных. Код снабжен комментариями для облегчения понимания и дальнейшего сопровождения программы. Так как разработка программ производилась в среде Visual Studio 2022, поиск и устранение ошибок кода занял не большое количество времени, благодаря встроенной функции отладки кода. 
